import { app, BrowserWindow, session, ipcMain } from 'electron';
import * as path from 'path';
import * as dotenv from 'dotenv';

// Load environment variables from .env file
const envPath = path.join(__dirname, '../../.env');
console.log('Loading environment variables from:', envPath);
dotenv.config({ path: envPath });

// Debug: Log loaded environment variables
console.log('Environment variables loaded:', {
  SUPABASE_URL: process.env.REACT_APP_SUPABASE_URL ? '***' : 'NOT FOUND',
  SUPABASE_ANON_KEY: process.env.REACT_APP_SUPABASE_ANON_KEY ? '***' : 'NOT FOUND',
  NODE_ENV: process.env.NODE_ENV || 'development'
});

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Define allowed environment variables
const ALLOWED_ENV_KEYS = [
  'REACT_APP_SUPABASE_URL',
  'REACT_APP_SUPABASE_ANON_KEY',
  'NODE_ENV'
];

// Create a safe environment object
const env = ALLOWED_ENV_KEYS.reduce((acc, key) => {
  if (process.env[key]) {
    acc[key] = process.env[key]!;  // Non-null assertion since we checked it exists
  }
  return acc;
}, {} as Record<string, string>);

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1280,
    width: 800,
    minWidth: 1024,
    minHeight: 768,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,  // Disable Node.js integration in the renderer
      contextIsolation: true,  // Enable context isolation for security
      webviewTag: true,        // Enable webview tag
      webSecurity: true,       // Enable web security
      sandbox: true,           // Enable sandbox for better security
      // In Electron 12+, remote module is disabled by default
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.maximize();

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// IPC handler to get environment variables
ipcMain.handle('get-env', (event, key: string) => {
  if (ALLOWED_ENV_KEYS.includes(key)) {
    return process.env[key];
  }
  console.warn(`Attempted to access unauthorized environment variable: ${key}`);
  return null;
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  // Set Content Security Policy
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    const csp = [
      "default-src 'self'",
      "connect-src 'self' https://*.supabase.co https://otnlburbcvilvzgbjzqi.supabase.co",
      "script-src 'self' 'unsafe-inline' 'unsafe-eval'",
      "style-src 'self' 'unsafe-inline'",
      "img-src 'self' data: blob:",
      "font-src 'self' data:",
      "frame-src 'self'"
    ].join('; ');

    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [csp]
      }
    });
  });

  // Clear cache before creating window
  session.defaultSession.clearCache().then(() => {
    createWindow();
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
