import { app, BrowserWindow, session, ipcMain, dialog } from 'electron';
import { spawn, ChildProcess, execSync } from 'child_process';
import * as path from 'path';
import { FileWatcherService } from './main/services/fileWatcherService';
import * as fs from 'fs';
import log from 'electron-log';
import * as dotenv from 'dotenv';

//---------------------------------LOGGING CONFIG------------------------------------------------------
// Configure electron-log - add this before any other code
log.transports.file.level = 'silly';  // Log everything in production
log.transports.file.maxSize = 5 * 1024 * 1024; // 5MB max log file size
log.transports.console.level = 'info'; // Only show info and above in console

// Override console methods to use electron-log
Object.assign(console, {
  log: log.log,
  warn: log.warn,
  error: log.error,
  debug: log.debug,
  info: log.info,
  verbose: log.verbose,
  silly: log.silly,
});

// Log the log file path - helpful for debugging
console.log('Log file location:', log.transports.file.getFile().path);

// Load environment variables from .env file
const envPath = path.join(__dirname, '../../.env');
console.log('Loading environment variables from:', envPath);
dotenv.config({ path: envPath });
let pythonProcess: any = null;
let fileWatcherService: FileWatcherService | null = null;

//---------------------------------MAIN PROCESS STARTS HERE------------------------------------------------------

/**
 * Set up IPC handlers that should be available immediately
 */
function setupIpcHandlers(): void {
  // Show directory picker dialog
  ipcMain.handle('dialog:show-directory-picker', async (event) => {
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory'],
      title: 'Select Workspace Folder'
    });
    
    if (result.canceled || result.filePaths.length === 0) {
      return { success: false, canceled: true };
    }
    
    return { 
      success: true, 
      path: result.filePaths[0],
      name: path.basename(result.filePaths[0])
    };
  });

  // Scan directory for files
  ipcMain.handle('fs:scan-directory', async (event, directoryPath: string) => {
    try {
      const scanDirectory = (dirPath: string, basePath: string = '', files: any[] = []): any[] => {
        const entries = fs.readdirSync(dirPath, { withFileTypes: true });
        
        for (const entry of entries) {
          const fullPath = path.join(dirPath, entry.name);
          const relativePath = basePath ? `${basePath}/${entry.name}` : entry.name;
          
          if (entry.isDirectory()) {
            files.push({
              name: entry.name,
              path: relativePath,
              isDirectory: true
            });
            // Recursively scan subdirectories
            scanDirectory(fullPath, relativePath, files);
          } else {
            files.push({
              name: entry.name,
              path: relativePath,
              isDirectory: false
            });
          }
        }
        
        return files;
      };
      
      const files = scanDirectory(directoryPath);
      return { success: true, files };
    } catch (error) {
      console.error('Error scanning directory:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      };
    }
  });

  // Read file content as base64
  ipcMain.handle('fs:read-file', async (event, filePath: string) => {
    try {
      const fileBuffer = fs.readFileSync(filePath);
      const base64Content = fileBuffer.toString('base64');
      return { success: true, content: base64Content };
    } catch (error) {
      console.error('Error reading file:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      };
    }
  });

}

// Define allowed environment variables
const ALLOWED_ENV_KEYS = [
  'NODE_ENV'
];

// Register IPC handlers immediately when the module loads
setupIpcHandlers();

// IPC handler to get environment variables
ipcMain.handle('get-env', (event, key: string) => {
  if (ALLOWED_ENV_KEYS.includes(key)) {
    return process.env[key];
  }
  console.warn(`Attempted to access unauthorized environment variable: ${key}`);
  return null;
});
// Debug: Log loaded environment variables
console.log('Environment variables loaded:', {
  NODE_ENV: process.env.NODE_ENV || 'development'
});

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Create a safe environment object
const env = ALLOWED_ENV_KEYS.reduce((acc, key) => {
  if (process.env[key]) {
    acc[key] = process.env[key]!;  // Non-null assertion since we checked it exists
  }
  return acc;
}, {} as Record<string, string>);

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

/**
 * Starts the python server
 */

function startPythonServer() {

  const isDev = process.env.NODE_ENV === 'development';
  
  // Debug: Log the resource path
  if (!isDev) {
    console.log('📁 Resource path:', process.resourcesPath);
    console.log('📁 Python directory:', path.join(process.resourcesPath, 'python'));
    
    // List contents to verify
    try {
      const pythonDir = path.join(process.resourcesPath, 'python');
      if (fs.existsSync(pythonDir)) {
        console.log('📁 Python directory contents:', fs.readdirSync(pythonDir));
        
        const serverDir = path.join(pythonDir, 'python-server');
        if (fs.existsSync(serverDir)) {
          console.log('📁 Server directory contents:', fs.readdirSync(serverDir));
        }
      }
    } catch (e) {
      console.error('Error listing directory:', e);
    }
  }
  
  const pythonPath = isDev 
    ? path.join(__dirname, '../../src/python-server/venv/Scripts/python.exe') // Relies on venv to be init and active
    : path.join(process.resourcesPath, 'python-server','python-server.exe');

  console.log('🔍 Python server path:', pythonPath);
  
  if (!fs.existsSync(pythonPath)) {
    console.error('❌ Python server executable not found at:', pythonPath);
    return;
  }

  const serverPath = isDev
    ? path.join(__dirname, '../../src/python-server/app.py')
    : path.join(process.resourcesPath, 'asgi.py');

  console.log(`🚀 Starting Python server in ${isDev ? 'development' : 'production'} mode...`);

  try {
    if (isDev) {
      console.log('🔧 Development mode: Running with Python interpreter');
      pythonProcess = spawn(pythonPath, [serverPath], {
        stdio: ['pipe', 'pipe', 'pipe'],  // Explicitly set stdin, stdout, stderr
        shell: true,
        env: {
          ...process.env,
          FLASK_ENV: 'development',
          FLASK_DEBUG: '1',
          PYTHONIOENCODING: 'utf-8',
          PYTHONUTF8: '1',
          LC_ALL: 'en_US.UTF-8',
          LANG: 'en_US.UTF-8'
        }
      });
    } else {
      console.log('🏭 Production mode: Running python as standalone executable');
      // On Windows, we don't need 'start' in production as we want to capture output
      const command = process.platform === 'win32' ? pythonPath : `"${pythonPath}"`;
      
      pythonProcess = spawn(command, [], {
        stdio: ['pipe', 'pipe', 'pipe'],
        shell: true,
        env: {
          ...process.env,
          FLASK_ENV: 'production',
          FLASK_DEBUG: '1',
          PYTHONIOENCODING: 'utf-8',
          PYTHONUTF8: '1',
          LC_ALL: 'en_US.UTF-8',
          LANG: 'en_US.UTF-8'
        }
      });
    }

    
    // Handle stdout with UTF-8 decoding
    pythonProcess.stdout.setEncoding('utf8');
    pythonProcess.stderr.setEncoding('utf8');

    // Log process events
    pythonProcess.on('error', (error: Error) => {
      console.error('❌ Failed to start Python server:', error.message);
    });

    pythonProcess.on('exit', (code: number, signal: NodeJS.Signals) => {
      if (code === 0) {
        console.log('ℹ️ Python server exited normally');
      } else if (code) {
        console.error(`❌ Python server exited with code ${code}`);
      } else {
        console.error(`❌ Python server was killed by signal ${signal}`);
      }
    });

    // Log stdout and stderr
    pythonProcess.stdout?.on('data', (data: Buffer) => {
      console.log(`🐍 [Python] ${data.toString().trim()}`);
    });

    pythonProcess.stderr?.on('data', (data: Buffer) => {
      console.error(`🐍 [Python Error] ${data.toString().trim()}`);
    });

    console.log('✅ Python server process started with PID:', pythonProcess.pid);

  } catch (error) {
    console.error('❌ Error starting Python server:', error);
  }
}


/**
 * Creates the main electron browser window
 */
const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1280,              // Default width for non-fullscreen
    height: 800,             // Default height for non-fullscreen
    minWidth: 1024,          // Minimum width when resized
    minHeight: 600,          // Minimum height when resized
    backgroundColor: '#0a0a0a', // Match your app's background color
    titleBarStyle: 'hidden', // Hide the default title bar
    frame: false, // Remove the default frame
    titleBarOverlay: {
      color: '#0a0a0a', // Title bar color
      symbolColor: '#e5e5e5', // Title text and buttons color
      height: 30 // Height of the title bar
    },
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,  // Disable Node.js integration in the renderer
      contextIsolation: true,  // Enable context isolation for security
      webviewTag: true,        // Enable webview tag
      webSecurity: true,       // Enable web security
      sandbox: true,           // Enable sandbox for better security
      // In Electron 12+, remote module is disabled by default
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.maximize();
  // temporary -- remove for prod
  //mainWindow.webContents.openDevTools();

  // Add this back for prod -- don't want dev tools menu opening in prod
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }

  // Initialize file watcher service
  fileWatcherService = new FileWatcherService(mainWindow);
  
  // Set up file watcher IPC handlers
  setupFileWatcherIPC();
};


/**
 * Set up file watcher IPC handlers
 */
function setupFileWatcherIPC(): void {
  // Start watching a directory
  ipcMain.handle('file-watcher:start-watching', (event, directoryPath: string) => {
    if (fileWatcherService) {
      fileWatcherService.startWatching(directoryPath);
      return { success: true, watchedPath: directoryPath };
    }
    return { success: false, error: 'File watcher service not initialized' };
  });

  // Stop watching
  ipcMain.handle('file-watcher:stop-watching', (event) => {
    if (fileWatcherService) {
      fileWatcherService.stopWatching();
      return { success: true };
    }
    return { success: false, error: 'File watcher service not initialized' };
  });

  // Get current watched path
  ipcMain.handle('file-watcher:get-watched-path', (event) => {
    if (fileWatcherService) {
      return {
        success: true,
        watchedPath: fileWatcherService.getWatchedPath(),
        isWatching: fileWatcherService.getIsWatching()
      };
    }
    return { success: false, error: 'File watcher service not initialized' };
  });
}


/**
 * This method will be called when Electron has finished
 * initialization and is ready to create browser windows.
 * Some APIs can only be used after this event occurs.
 */
app.whenReady().then(() => {
  // Set Content Security Policy
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    const csp = [
      "default-src 'self'",
      "connect-src 'self' ws://localhost:3001 ws://127.0.0.1:3001 ws://localhost:5001 ws://127.0.0.1:5001 http://localhost:3001 http://127.0.0.1:3001 http://localhost:5001 http://127.0.0.1:5001 https://volute-auth-proxy.vercel.app",
      "script-src 'self' 'unsafe-inline' 'unsafe-eval'",
      "style-src 'self' 'unsafe-inline'",
      "img-src 'self' data: blob:",
      "font-src 'self' data:",
      "frame-src 'self'"
    ].join('; ');

    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [csp]
      }
    });
  });

  // Start Python server
  startPythonServer();

  // Clear cache before creating window
  session.defaultSession.clearCache().then(() => {
    createWindow();
  });
});

function cleanupPythonProcess() {
  if (!pythonProcess) return;

  console.log('🛑 Attempting to clean up Python process...');
  
  try {
    if (process.platform === 'win32') {
      // On Windows, we need to kill the entire process tree
      const { exec } = require('child_process');
      const pid = pythonProcess.pid;
      
      // This command will kill the process and all its children
      exec(`taskkill /F /T /PID ${pid}`, (error: Error) => {
        if (error) {
          console.error('❌ Failed to kill Python process tree:', error.message);
        } else {
          console.log('✅ Successfully killed Python process tree');
        }
      });
    } else {
      // On Unix-like systems
      process.kill(-pythonProcess.pid, 'SIGTERM'); // Negative PID kills the process group
      console.log('✅ Sent SIGTERM to Python process group');
    }
  } catch (error) {
    console.error('❌ Error during Python process cleanup:', error);
  } finally {
    pythonProcess = null;
  }
}

function cleanupFileWatcher() {
  if (fileWatcherService) {
    console.log('🔄 Cleaning up file watcher service...');
    fileWatcherService.destroy();
    fileWatcherService = null;
    console.log('✅ File watcher service cleaned up');
  }
}

app.on('before-quit', (event) => {
  console.log('🔄 App is quitting, cleaning up...');
  cleanupPythonProcess();
  cleanupFileWatcher();
  
  // If you need to wait for cleanup to complete before quitting:
  // event.preventDefault();
  // cleanupPythonProcess().then(() => {
  //   app.quit();
  // });
});

/**
 * Quit when all windows are closed, except on macOS. There, it's common
 * for applications and their menu bar to stay active until the user quits
 * explicitly with Cmd + Q.
 */
app.on('window-all-closed', () => {
  // Stop Python server
  console.log('🚪 All windows closed, cleaning up...');
  cleanupPythonProcess();
  cleanupFileWatcher();
  // Quit the electron app
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Add signal handlers for graceful shutdown
process.on('SIGINT', () => {
  console.log('🛑 Received SIGINT, cleaning up...');
  cleanupPythonProcess();
  cleanupFileWatcher();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('🛑 Received SIGTERM, cleaning up...');
  cleanupPythonProcess();
  cleanupFileWatcher();
  process.exit(0);
});
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
