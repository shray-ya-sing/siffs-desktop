#!/usr/bin/env python3
"""
Test script to isolate paragraph formatting issues in PowerPoint writer.
This script uses the exact same metadata generated by the LLM to test the writer directly.
"""

import os
import sys
import json
import ast
import logging
from pathlib import Path

# Add the current directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from powerpoint.editing.powerpoint_writer import PowerPointWriter

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

def test_paragraph_formatting():
    """Test paragraph formatting with the exact metadata from the LLM."""
    
    # Original file path (we'll copy it for testing)
    original_file = r"C:\Users\shrey\OneDrive\Desktop\docs\speed_it_up\2024.10.27 Project Core - Valuation Analysis_v22.pptx"
    
    # Create a test copy
    test_file = r"C:\Users\shrey\projects\cori-apps\cori_app\src\python-server\test_paragraph_formatting_output.pptx"
    
    # Copy the original file to test location
    import shutil
    if os.path.exists(original_file):
        shutil.copy2(original_file, test_file)
        logger.info(f"Copied {original_file} to {test_file}")
    else:
        logger.error(f"Original file not found: {original_file}")
        return False
    
    # Parse the paragraph data string from the LLM (as seen in logs)
    paragraphs_str = "[{'text': 'JPMorgan Chase acquired substantial majority of assets and assumed certain liabilities of First Republic Bank from the FDIC', 'bullet_style': 'bullet', 'indent_level': 0}, {'text': '$173B of loans and $30B of securities', 'bullet_style': 'bullet', 'indent_level': 0}, {'text': 'Approximately $92B of deposits and $28B of FHLB advances', 'bullet_style': 'bullet', 'indent_level': 0}, {'text': 'JPMorgan Chase did not assume First Republic Bank\\'s corporate debt or preferred stock', 'bullet_style': 'bullet', 'indent_level': 0}, {'text': 'JPMorgan Chase will make a payment of $10.6B to the FDIC', 'bullet_style': 'bullet', 'indent_level': 0}, {'text': 'FDIC will provide loss share agreements with respect to most acquired loans', 'bullet_style': 'bullet', 'indent_level': 0}, {'text': 'Single family residential mortgages: 80% loss coverage for seven years', 'bullet_style': 'bullet', 'indent_level': 1}, {'text': 'Commercial loans, including CRE: 80% loss coverage for five years', 'bullet_style': 'bullet', 'indent_level': 1}]"
    
    # Parse the paragraph data
    try:
        paragraph_data = ast.literal_eval(paragraphs_str)
        logger.info(f"Successfully parsed {len(paragraph_data)} paragraphs")
        for i, para in enumerate(paragraph_data):
            logger.debug(f"Paragraph {i}: {para['text'][:50]}... (bullet: {para['bullet_style']}, indent: {para['indent_level']})")
    except Exception as e:
        logger.error(f"Failed to parse paragraph data: {e}")
        return False
    
    # Create the slide data structure as expected by the writer
    slide_data = {
        "slide5": {
            "TransactionOverviewBullets": {
                "font_name": "Arial",
                "font_size": 9,
                "font_color": "#000000",
                "paragraphs": paragraph_data  # Use the parsed list directly
            }
        }
    }
    
    logger.info("Created slide data structure")
    logger.debug(f"Slide data: {json.dumps(slide_data, indent=2, default=str)}")
    
    # Test 1: Direct paragraph data as list
    logger.info("=== TEST 1: Direct paragraph data as list ===")
    try:
        writer = PowerPointWriter()
        writer.visible = True  # Keep PowerPoint visible
        
        success, updated_shapes = writer.write_to_existing(slide_data, test_file)
        
        if success:
            logger.info(f"SUCCESS: Updated {len(updated_shapes)} shapes")
            for shape in updated_shapes:
                logger.info(f"Updated shape: {shape.get('shape_name', 'unknown')} - Properties: {shape.get('properties_applied', [])}")
        else:
            logger.error("FAILED: write_to_existing returned False")
            
    except Exception as e:
        logger.error(f"FAILED: Exception in test 1: {e}", exc_info=True)
    
    # Test 2: Paragraph data as string (as it appears in the logs)
    logger.info("=== TEST 2: Paragraph data as string (as in logs) ===")
    slide_data2 = {
        "slide5": {
            "TransactionOverviewBullets": {
                "font_name": "Arial",
                "font_size": 9,
                "font_color": "#000000",
                "paragraphs": paragraphs_str  # Use the original string
            }
        }
    }
    
    try:
        writer2 = PowerPointWriter()
        writer2.visible = True  # Keep PowerPoint visible
        
        success2, updated_shapes2 = writer2.write_to_existing(slide_data2, test_file)
        
        if success2:
            logger.info(f"SUCCESS: Updated {len(updated_shapes2)} shapes")
            for shape in updated_shapes2:
                logger.info(f"Updated shape: {shape.get('shape_name', 'unknown')} - Properties: {shape.get('properties_applied', [])}")
        else:
            logger.error("FAILED: write_to_existing returned False")
            
    except Exception as e:
        logger.error(f"FAILED: Exception in test 2: {e}", exc_info=True)
    
    # Test 3: Also add text content (to see if text gets applied)
    logger.info("=== TEST 3: Add text content along with paragraphs ===")
    
    # Build text content from paragraphs
    text_content = ""
    for para in paragraph_data:
        # Add bullet character and indentation
        indent = "    " * para['indent_level']  # 4 spaces per indent level
        if para['bullet_style'] == 'bullet':
            text_content += f"{indent}â€¢ {para['text']}\n"
        else:
            text_content += f"{indent}{para['text']}\n"
    
    text_content = text_content.rstrip('\n')  # Remove trailing newline
    
    slide_data3 = {
        "slide5": {
            "TransactionOverviewBullets": {
                "font_name": "Arial",
                "font_size": 9,
                "font_color": "#000000",
                "text": text_content,  # Add explicit text content
                "paragraphs": paragraph_data  # Keep paragraph data for formatting
            }
        }
    }
    
    logger.info(f"Generated text content:\n{text_content}")
    
    try:
        writer3 = PowerPointWriter()
        writer3.visible = True  # Keep PowerPoint visible
        
        success3, updated_shapes3 = writer3.write_to_existing(slide_data3, test_file)
        
        if success3:
            logger.info(f"SUCCESS: Updated {len(updated_shapes3)} shapes")
            for shape in updated_shapes3:
                logger.info(f"Updated shape: {shape.get('shape_name', 'unknown')} - Properties: {shape.get('properties_applied', [])}")
        else:
            logger.error("FAILED: write_to_existing returned False")
            
    except Exception as e:
        logger.error(f"FAILED: Exception in test 3: {e}", exc_info=True)
    
    logger.info(f"Test completed. PowerPoint file left open at: {test_file}")
    logger.info("Please review the file manually to see if paragraph formatting was applied correctly.")
    
    return True

if __name__ == "__main__":
    print("Starting paragraph formatting test...")
    test_paragraph_formatting()
    print("Test completed. Check the logs above for results.")
